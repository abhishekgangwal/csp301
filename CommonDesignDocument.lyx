#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 4cm
\rightmargin 3cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title

\size huge
PingPong
\end_layout

\begin_layout Author
Common Design Document
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tableofcontents
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Executing game 
\end_layout

\begin_layout Subsection
game help
\end_layout

\begin_layout Standard
$ make help will show a short help screen.
\end_layout

\begin_layout Subsection
To play the game,
\end_layout

\begin_layout Enumerate
Create a parameter file.
 This is a text file containing the desired setup of PingPong.
 The parameters include :
\end_layout

\begin_deeper
\begin_layout Enumerate
Server IP
\end_layout

\begin_layout Enumerate
Own IP
\end_layout

\begin_layout Enumerate
Port Number
\end_layout

\begin_layout Enumerate
Number of players
\end_layout

\begin_layout Enumerate
Number of balls
\end_layout

\begin_layout Enumerate
Hardness Level
\end_layout

\begin_layout Enumerate
Game Length
\end_layout

\end_deeper
\begin_layout Enumerate
Execute game as : 
\end_layout

\begin_deeper
\begin_layout Enumerate
$ make server ( if you are a server )
\end_layout

\begin_layout Enumerate
$ make client ( if you are a client )
\end_layout

\begin_layout Enumerate
$ make doublegame ( if two player game on same computer )
\end_layout

\begin_layout Enumerate
$ make singlegame ( to play a single player game and specify no.
 of players =1 in parameter file)
\end_layout

\begin_layout Enumerate
$ make computer ( to see match between both computer players)
\end_layout

\end_deeper
\begin_layout Section

\size normal
Game System
\end_layout

\begin_layout Subsection

\size normal
Field Specification 
\end_layout

\begin_layout Standard
Field is a square table of dimensions 10
\begin_inset Quotes erd
\end_inset

 X 10
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Dimensions of field are as shown in fig.
 
\end_layout

\begin_layout Subsection

\size normal
Paddles 
\end_layout

\begin_layout Standard
Lent of paddles is 3
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
paddles hit ball with maximum power when hit by center.
 Power decreases as ball moves away from center.
 
\end_layout

\begin_layout Subsection

\size normal
Ball
\end_layout

\begin_layout Standard
Radius of ball is .25
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Number of balls in game can be varied from 1 to 3.
\end_layout

\begin_layout Section

\size normal
Game Physics
\end_layout

\begin_layout Standard
The game physics will be realistic to a degree.
 They will be based upon a realistic physics handling based on concepts
 of collision theory and friction.
 
\end_layout

\begin_layout Subsection

\size normal
Collision Model
\end_layout

\begin_layout Standard
Ball collides elastically with bricked walls.
 While collision with paddle depends on the position of collision relative
 to centre of paddle.
 
\end_layout

\begin_layout Standard
If ball collides at centre of paddle, angle of inclination is same as angle
 of reflection.
 While angle of reflection varies slightly as collision point moves away
 from paddle.
 This is done to make game more variable and to avoid dead locks.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$ 
\backslash
angle R = 
\backslash
angle i + x * 
\backslash
theta$
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
where 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
angle$
\end_layout

\end_inset

i is angle of inclination 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
angle$
\end_layout

\end_inset

r is angle of reflection 
\end_layout

\begin_layout Itemize
x is displacement from centre ( +ve or -ve) 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
theta$
\end_layout

\end_inset

 is a constant of proportionality 
\end_layout

\begin_layout Standard
Speed of ball remains same on elastic collision while colliding with paddle
 , it depends again on position of collision point relative to centre.
 Reflection speed is maximum at collision at center.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$V_{ref} = V_{inc} * {
\backslash
alpha} - { | x * {
\backslash
beta} | }  $
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Collision between balls
\end_layout

\begin_layout Standard
In case of more than one balls , collisions will be completely elastic and
 velocity of both balls become opposite to each other
\end_layout

\begin_layout Subsection

\size normal
Friction Model 
\end_layout

\begin_layout Standard
Velocity of ball decreases as ball moves on table due to friction 
\end_layout

\begin_layout Section

\size normal
Network Protocol
\end_layout

\begin_layout Itemize
To play multiplayer, game server and client communicates through TCP/IP.
 
\end_layout

\begin_layout Subsection
Server
\end_layout

\begin_layout Itemize
Server initiates the game giving a port number.
\end_layout

\begin_layout Itemize
Various game parameters like friction, paddle speed etc are determined by
 server.
 
\end_layout

\begin_layout Itemize
Server sends the coordinates of ball as well as coordinates of all other
 players to client.
 
\end_layout

\begin_layout Itemize
There is different thread for each client in server, so that different client
 processes can run simultaneously.
 
\end_layout

\begin_layout Itemize
If server doesn't reveive message from any client for 5 second, connection
 will be closed.
\end_layout

\begin_layout Subsection
Client
\end_layout

\begin_layout Itemize
Clients connect to server using server's IP address and port number.
 
\end_layout

\begin_layout Itemize
Clients send only the coordinates of their paddle to server through sockets.
\end_layout

\begin_layout Itemize
If client doesn't receive message from server for 5 second, it will close
 the connection.
\end_layout

\begin_layout Subsection
Transmission Types
\end_layout

\begin_layout Standard
struct GameState{
\end_layout

\begin_layout Standard
Player 1;
\end_layout

\begin_layout Standard
Player 2;
\end_layout

\begin_layout Standard
Player 3;
\end_layout

\begin_layout Standard
Player4;
\end_layout

\begin_layout Standard
Ball 1;
\end_layout

\begin_layout Standard
Ball 2;
\end_layout

\begin_layout Standard
Ball 3;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
struct ClientMessage{
\end_layout

\begin_layout Standard
Player;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Itemize
Server sends the struct GameState to all the clients so that they can update
 their variables according to it.
 Struct GameState contains the positions of paddles of all the players and
 also the position of the ball and its speed.
\end_layout

\begin_layout Itemize
All the clients send the struct ClientMessage to the server at regular time
 intervals which contains information about their positions.
\end_layout

\begin_layout Section
System Requirements
\end_layout

\begin_layout Standard
Requirements:
\end_layout

\begin_layout Itemize
Audio drivers installed
\end_layout

\begin_layout Itemize
VLC player 
\end_layout

\begin_layout Itemize
OpenGL libraries 
\end_layout

\begin_layout Itemize
G++ compiler
\end_layout

\begin_layout Itemize
Linux Operating System
\end_layout

\end_body
\end_document
